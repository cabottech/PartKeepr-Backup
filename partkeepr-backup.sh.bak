#!/bin/sh

# PartKeepr Backup
# 
# Performs a backup of the PartKeepr database and relevent files (data and config).
# Creates a ZIP archive with a date-time stamped filename.
# Modify the associated pk-backup.property file with you system specifics.
#
# See README.md for further details and instructions.
# 
# License: MIT
# 
# Author: Darian, https://cabottechnologies.com
#
# Tested with:
# - PartKeepr 1.4.0 on Raspbian 9.13 (stretch)
#
# Requires:
# - 'zip' package.

echo "\nPartKeepr Backup\n"

# Source the script config file:
. ./partkeepr-backup.properties


backup_database() {
	printf "PartKeepr database backup started...\n"

	local startdate=$(date +%s)
	dateStartFile=$(date +'%Y%m%d-%H%M%S')
	local backup_path="$backup_root_path/$(date +%Y%m)"
	local log_path="$backup_path/${dateStartFile}_backup.log"
	backup_db_path="$backup_path/${dateStartFile}_database-backup.sql"

	printf "Log: $log_path\n"

	# Create backup path and set permissions...
	mkdir -p $backup_path
	chmod 755 $backup_path

	printf "\n\n================================\n" | tee -a $log_path
	printf "PartKeepr database backup\nStarted: $dateStartFile\n\n" | tee -a $log_path

	printf "Dumping data from MySQL...\n" >> ${log_path}
	mysqldump --opt --user=$database_user --password=$database_pass $database_name > $backup_db_path

    printf "Compressing backup to zip archive...\n" | tee -a $log_path
    # Zip the SQL file with maximum compression. This is CPU intensive, so nice 10 is used (low priority).
    nice -10 zip -j -m -q -T -9 "$backup_db_path.zip" "$backup_db_path"

	# Print a backup summary...
	printf "\nPartKeepr database backup completed:\n" | tee -a $log_path
	printf "  File path:   $backup_path/\n" | tee -a $log_path
	printf "  File name:   $backup_db_path.zip\n" | tee -a $log_path
	local filesize=$(ls -lsah "$backup_db_path.zip" | awk '{print $6}')
	printf "  File size:   $filesize\n" | tee -a $log_path

	local dur_sec=$(( $(date +%s) - $startdate ))
	local hr=$(( $dur_sec / 3600 )) # Calculate hours.
	local min=$(( ($dur_sec % 3600) / 60 )) # Calculate remaining minutes.
	local sec=$(( $dur_sec % 60 )) # Calculate remaining seconds.
	min=$(printf "%02d" $min) # Ensure two digits (zero padding).
	sec=$(printf "%02d" $sec) # Ensure two digits (zero padding).
	printf "  Duration:    $hr:$min:$sec\n\n" | tee -a $log_path

	exit_mode=0
}


echo "Backup path:"
echo $backup_root_path
echo "\n"

## If run directly, do the full backup suite:
backup_database


### EOF ###